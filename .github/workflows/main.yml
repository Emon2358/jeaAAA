name: LZH→ZIP→S3M/IT→FLAC 変換ワークフロー

# 手動トリガー（workflow_dispatch）でURLを指定可能
on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'ダウンロードしたいファイルのURL（オプション）'
        required: false
        default: ''

jobs:
  convert-and-commit:
    name: ダウンロード＋LZH/ZIP 解凍・S3M/IT→FLAC 変換・コミット
    runs-on: ubuntu-latest

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true  # 後続の git push に必要

      # 2. もし URL が指定されていれば、そのファイルをダウンロード
      - name: Download file from provided URL
        if: ${{ github.event.inputs.target_url != '' }}
        run: |
          mkdir -p downloaded
          url="${{ github.event.inputs.target_url }}"
          filename=$(basename "$url")
          echo "Downloading: $url → downloaded/$filename"
          curl -L "$url" -o "downloaded/$filename"
          # ダウンロードしたファイルをリポジトリ直下にもコピーして、以降の解凍ステップで見つかるようにする
          cp "downloaded/$filename" .

      # 3. 必要なツール（p7zip, unzip, ffmpeg）をインストール
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full unzip ffmpeg

      # 4. リポジトリ内およびダウンロード済みの .lzh と .zip ファイルを探して解凍
      - name: Extract all .lzh and .zip files
        run: |
          # すべての .lzh/.zip ファイルを検索し、解凍先は一時ディレクトリ ./extracted_mods/
          mkdir -p extracted_mods
          # リポジトリ直下 (.) にある .lzh/.zip と、downloaded/ 以下にあるファイルも対象
          find . \( -path "./.git" -prune \) -o -type f \( -name "*.lzh" -o -name "*.zip" \) | while read archive; do
            echo "Extracting: $archive"
            # 解凍先は extracted_mods/ 配下に、元の相対パスを保ったディレクトリを作成
            dest_dir="extracted_mods/$(dirname "${archive#./}")"
            mkdir -p "$dest_dir"
            # 拡張子に応じて解凍方法を分岐
            case "$archive" in
              *.lzh)
                7z x "$archive" -o"$dest_dir"
                ;;
              *.zip)
                unzip -o "$archive" -d "$dest_dir"
                ;;
            esac
          done

      # 5. 解凍されたフォルダ内の .s3m および .it を探して .flac に変換
      - name: Convert .s3m and .it → .flac
        run: |
          # 出力ディレクトリを用意
          mkdir -p converted_flac
          # extracted_mods 内の .s3m と .it をすべて検索して変換
          find extracted_mods -type f \( -name "*.s3m" -o -name "*.it" \) | while read modfile; do
            echo "Converting: $modfile"
            # 元ファイルのパスから相対パスを取得
            relpath="${modfile#extracted_mods/}"
            outdir="converted_flac/$(dirname "$relpath")"
            mkdir -p "$outdir"
            # 拡張子を取り除いたファイル名を取得
            filename_no_ext=$(basename "$modfile" | sed -E 's/\.(s3m|it)$//')
            outfile="$outdir/${filename_no_ext}.flac"
            # ffmpeg で変換（入力: .s3m または .it、出力: FLAC）
            ffmpeg -y -i "$modfile" -c:a flac "$outfile"
          done

      # 6. 変換した .flac をリポジトリにコピー
      - name: Copy converted .flac into repository
        run: |
          # converted_flac/ 以下の構造をそのままリポジトリ直下の flac_output/ にコピー
          mkdir -p flac_output
          rsync -av converted_flac/ flac_output/

      # 7. Git ユーザー設定（デフォルト値を設定）
      - name: Setup Git for commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 8. 変換結果をコミットしてプッシュ
      - name: Commit and push converted FLAC files
        run: |
          # 変更があればコミットしてプッシュ
          if [ -n "$(git status --porcelain flac_output)" ]; then
            git add flac_output/
            git commit -m "Add converted FLAC files from S3M and IT (via GitHub Actions)"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes detected in flac_output/. Nothing to commit."
          fi
